---
export interface Props {
  lesson: {
    slug: string;
    data: {
      title: string;
      description?: string;
      order?: number;
      tags?: string[];
      image?: string;
      externalLink?: string;
      slides?: boolean;
    };
  };
}

const { lesson } = Astro.props;
const base = import.meta.env.BASE_URL.endsWith('/') ? import.meta.env.BASE_URL : import.meta.env.BASE_URL + '/';
const lessonUrl = lesson.data.externalLink || `${base}lessons/${lesson.slug}/`;
const slidesUrl = `${base}slides/${lesson.slug}`
const isExternal = !!lesson.data.externalLink;
---

<article class="post on-list">
  <h2 class="post-title">
    <a href={lessonUrl} target={isExternal ? "_blank" : undefined} rel={isExternal ? "noopener" : undefined}>
      {lesson.data.order}. {lesson.data.title}
    </a>
  </h2>
  <div class="post-meta">
  </div>
  {lesson.data.tags && lesson.data.tags.length > 0 && (
    <span class="post-tags">
      {lesson.data.tags.map((tag) => (
        <a href={`${base}tags/${tag}/`}>{tag}</a>
      ))}
    </span>
  )}
  {lesson.data.image && (
    <figure class="post-cover">
      <img src={lesson.data.image} alt={lesson.data.title} />
    </figure>
  )}
  {lesson.data.description && (
    <div class="post-content">
      <p>{lesson.data.description}</p>
    </div>
  )}
  <div class="spaced">
    <a href={lessonUrl} class="read-more button inline" target={isExternal ? "_blank" : undefined} rel={isExternal ? "noopener" : undefined}>view full lesson</a>
    {lesson.data.slides && <a href={slidesUrl} class="read-more button inline">view as slides</a>}
  </div>
</article>

<style>
.spaced *{
  padding-right: 10px;
}
</style>
