---
export interface Props {
  title: string;
  description?: string;
  image?: string;
  altViewUrl?: string;
  altViewType?: string;
}

const { altViewUrl, altViewType, title, description = 'COS 3100: Intro to git - AUBG short course', image } = Astro.props;
const canonicalURL = new URL(Astro.url.pathname, Astro.site);
const base = import.meta.env.BASE_URL.endsWith('/') ? import.meta.env.BASE_URL : import.meta.env.BASE_URL + '/';
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href={`${base}favicon.svg`} />
    <link rel="alternate icon" type="image/x-icon" href={`${base}favicon.ico`} />
    <meta name="generator" content={Astro.generator} />

    <title>{title}</title>
    <meta name="description" content={description} />
    <link rel="canonical" href={canonicalURL} />

    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:type" content="website" />
    <meta property="og:url" content={canonicalURL} />
    {image && <meta property="og:image" content={new URL(image, Astro.url)} />}

    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    {image && <meta name="twitter:image" content={new URL(image, Astro.url)} />}

    <link rel="sitemap" href={`${base}sitemap-index.xml`} />
    <link rel="alternate" type="application/rss+xml" title="RSS" href={`${base}rss.xml`} />
  </head>
  <body>
    <div class="container center">
      <header class="header">
        <div class="header__inner">
          <div class="header__logo">
            <a href={base}>
              <div class="logo">
                <span class="big-only">COS 3100: </span> Intro to GIT
              </div>
            </a>
          </div>
          <ul class="menu menu--mobile">
            <li class="menu__trigger">menu â–¾</li>
            <li>
              <ul class="menu__dropdown">
                <li><a href={`${base}lessons/`}>lessons</a></li>
                <li><a href={`${base}tags/`}>tags</a></li>
                <li>
                  <a
                    href="https://bellard.org/jslinux/vm.html?url=alpine-x86.cfg&mem=192"
                    class="external"
                    target="_blank"
                  >online terminal</a>
                </li>

                {altViewUrl && <li><a class="bordered-top" href={altViewUrl}>view {altViewType}</a></li>}
              </ul>
            </li>
          </ul>
        </div>
 
        <nav class="navigation-menu">
          <ul class="navigation-menu__inner menu--desktop">
                <li><a href={`${base}lessons/`} class="button inline">lessons</a></li>
                <li><a href={`${base}tags/`} class="button inline">tags</a></li>
            <li>
              <a
                href="https://bellard.org/jslinux/vm.html?url=alpine-x86.cfg&mem=192"
                class="button inline external"
                target="_blank"
              >online terminal</a>
            </li>
          </ul>
          {altViewUrl && <a class="big-only button inline paddingx" href={altViewUrl}>view {altViewType}</a>}
        </nav>
      </header>

      <slot />

    </div>
  </body>
</html>

<script src="../js/menu.js" />
<script src="../js/code.js" />

<style is:global>
  /* Import all CSS files in the correct order */
  @import "../styles/terminal.css";
  @import "../styles/fonts.css";
  @import "../styles/main.css";
  @import "../styles/header.css";
  @import "../styles/menu.css";
  @import "../styles/footer.css";
  @import "../styles/buttons.css";
  @import "../styles/post.css";
  @import "../styles/pagination.css";
  @import "../styles/code.css";
  @import "../styles/syntax.css";
  @import "../styles/gist.css";
  @import "../styles/terms.css";

  .paddingx {
    padding-left: 10px;
    padding-right: 10px;
  }

  .bordered-top {
    border-top: 1px solid var(--secondary);
  }
</style>
